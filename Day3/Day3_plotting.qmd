---
title: "plotting"
format: revealjs
editor: source
---

Intro ggplot...

# Introduction to ggplot2 and the Grammar of Graphics


## What is ggplot2?
- ggplot2 is an R package for creating data visualizations.
- It follows the principles of the Grammar of Graphics.

# Recap:

https://rstudio-conf-2022.github.io/ggplot2-graphic-design/materials/02_concepts_pt1.html#/title-slide


# The Grammar of {ggplot2}

## The Grammar of {ggplot2}

<br>
<table style='width:100%;font-size:14pt;'>
  <tr>
    <th>Component</th>
    <th>Function</th>
    <th>Explanation</th>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Data</b></td>
    <td><code>ggplot(data)</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>*The raw data that you want to visualise.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Aesthetics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></td>
    <td><code>aes()</code></td>
    <td>*Aesthetic mappings between variables and visual properties.*</td>
  <tr>
    <td><b style='color:#67676;'>Geometries</b></td>
    <td><code>geom_*()</code></td>
    <td>*The geometric shapes representing the data.*</td>
  </tr>
</table>


::: footer
from: Cedric Scherer <https://rstudio-conf-2022.github.io/ggplot2-graphic-design/>
:::

## The Grammar of {ggplot2}


<br>
<table style='width:100%;font-size:14pt;'>
  <tr>
    <th>Component</th>
    <th>Function</th>
    <th>Explanation</th>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Data</b></td>
    <td><code>ggplot(data)</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>*The raw data that you want to visualise.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Aesthetics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></td>
    <td><code>aes()</code></td>
    <td>*Aesthetic mappings between variables and visual properties.*</td>
  <tr>
    <td><b style='color:#67676;'>Geometries</b></td>
    <td><code>geom_*()</code></td>
    <td>*The geometric shapes representing the data.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Statistics</b></td>
    <td><code>stat_*()</code></td>
    <td>*The statistical transformations applied to the data.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Scales</b></td>
    <td><code>scale_*()</code></td>
    <td>*Maps between the data and the aesthetic dimensions.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Coordinate System</b></td>
    <td><code>coord_*()</code></td>
    <td>*Maps data into the plane of the data rectangle.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Facets</b></td>
    <td><code>facet_*()</code></td>
    <td>*The arrangement of the data into a grid of plots.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Visual Themes</b></td>
    <td><code>theme()</code> and <code>theme_*()</code></td>
    <td>*The overall visual defaults of a plot.*</td>
  </tr>
</table>


::: footer
from: Cedric Scherer <https://rstudio-conf-2022.github.io/ggplot2-graphic-design/>
:::

## Key Concepts of the Grammar of Graphics
1. Data
2. Aesthetics
3. Geometries
4. Scales
5. Facets
6. Statistical Transformations
7. Coordinate System
8. Themes


## Aesthetics
- Aesthetics map variables in the data to visual attributes.
- Examples: color, size, shape, position, etc.


## Geometries
- Geometries define the type of plot to be created.
- Examples: points, lines, bars, areas, etc.


## Scales
- Scales map values from the data space to the aesthetic space.
- Examples: continuous, discrete, logarithmic scales, etc.


## Facets
- Facets allow you to create subplots based on one or more variables.
- Examples: facet_wrap, facet_grid.


## Statistical Transformations
- Statistical transformations summarize or transform the data.
- Examples: mean, median, count, etc.


## Coordinate System
- The coordinate system defines the plane on which the plot is created.
- Examples: Cartesian, polar, etc.


## Themes
- Themes control the overall appearance of the plot.
- Examples: font, color, background, etc.


## ggplot2 Workflow
1. Load the ggplot2 package.
2. Prepare the data.
3. Specify the aesthetics and geometries.
4. Add scales, facets, and statistical transformations as needed.
5. Customize the plot appearance using themes.
6. Render the plot.


## Example Code
```{r}
library(ggplot2)

# Prepare the data
data <- data.frame(x = 1:10, y = rnorm(10))

# Create a scatter plot
ggplot(data, aes(x = x, y = y)) +
  geom_point() +
  labs(title = "Scatter Plot", x = "X", y = "Y")
```

Plotting models: ggstatsplot

dotwhisker plot

Raincloud plots


Plotting


adding plots together: patchwork


https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots.html


