---
title: "Advanced R programming"
format: 
  revealjs:
    theme: simple
execute: 
  echo: true
  
---

# Organizational stuff {.smaller}


**Day 1:** Project Documentation, Workflow, Reproducibility, …

**Day 2:** Data cleaning & manipulation in the tidyverse

**Day 3:** Plotting

**Day 4:** Advanced R Programming 

**Day 5:** Build your own website 

**Exam:** pass fail exam - your website with one example project

# Day 1 {.smaller}

What we'll do today:

1.  Introduction rounds

2.  Keeping your projects organized (project setup, data management, here::here(), ...)

3.  Version control using git and github

4.  Rmarkdown & Quarto for reports and analyses

5.  Package documentation (pacman / sessionInfo ...)

6.  RStudio hacks (multi-line editing, keyboard shortcuts, ..)


# Introductions

- Your name
- Your proudest moment when learning / achieving something in R
- Your biggest R frustration 


# Project organization


# (My) Best practices

The following is an incomplete list of what I think are good practices for working with R.

These practices should help making your work more reproducible, intelligible to you and others, and overall easier to work with. 

For more, see also: https://rstats.wtf/ 


## 
:::: {.columns}
::: {.column width="50%"}

<h1>
Always start R with a blank slate
</h1>
::: 
::: {.column width="50%"}
![](images/rstudio-workspace.png)
:::
:::: 

## Restart R often during work {.smaller}

If you use RStudio, use the menu item *Session > Restart* R or the associated keyboard shortcut Ctrl+Shift+F10 (Windows and Linux) or Command+Shift+F10 (Mac OS). 

Additional keyboard shortcuts make it easy to restart development where you left off, i.e. to say “re-run all the code up to HERE”:

-  In an R script, use Ctrl+Alt+B (Windows and Linux) or Command+Option+B (Mac OS)
-  In R markdown, use Ctrl+Alt+P (Windows and Linux) or Command+Option+P (Mac OS)


## Don't use `rm(list = ls())`

`rm(list = ls())` does not remove everything in your environment (e.g. library calls, setting of working environment..)! 

Therefore, it does not guarantee reproducibility. Instead, just make sure that you are working from a restarted R session, and don't save your workspace.

# Work with R projects

- Keep your work organized in R projects and folders pertaining to these projects


- Use **relative paths** to read in data and save stuff


```{r}
#| eval: false
# don't use absolute paths
my_file <- read.csv("/Users/au525642/Dropbox/postdoc/research_projects/misc_projects/data/my_file.csv")

# use relative paths
my_file <- read.csv("data/my_file.csv")
```


- you can use **project templates** when setting up an R project to automatically create folders and structures for you

## Understanding working directories 

```{r}
getwd()
```

## The "here" package 

```{r}
#| output-location: fragment
# the here function gets your current working directory, when the package was loaded
here::here()
```

<nb>

:::{.fragment}

```{r}
#| output-location: fragment
# you can simply add folders and file names to complete a path
here::here("data", "my_data_file.csv")
```

<nb>
:::

:::{.fragment}
```{r}
# this works, too
here::here("data/my_data_file.csv") 
```
:::



# Working with code

## What is good code?

[10 minute discussion]

## {background-iframe="https://style.tidyverse.org/index.html" background-interactive="true"}

## A quick tip: automatic formatting

- For mac: Cmd + Shift + A 
- For windows: Ctrl + Shift + A 

Helps with many things, but not a magic bullet.. 

:::{.fragment}
```{r}
#| eval: false
# before automatic formatting
a_random_function <- function(something, something_else){result <- do_something(something) %>% 
  do_something_new(something_else)}
```
:::

<nb>

:::{.fragment}
```{r}
#| eval: false
# after automatic formatting
a_random_function <-
  function(something, something_else) {
    result <- do_something(something) %>%
      do_something_new(something_else)
  }
```
:::


## Naming conventions

Consistency is key! Use one system and stick to it. This will help not only in readibility, but also writing code to for example select key variables of interest.

Compare:

```{r}
#| eval: false
my_data %>% 
  select(starts_with("scale_name"))
```

<nb>

:::{.fragment}
```{r}
#| eval: false
my_data %>% 
  select("item_1", "Item_2", "This_is_the_3_item", "Yet_another_item", "What.is.this.item?")
```
:::

## Naming conventions (continued)
 
I like the following:

- small case for all variables
- snake_case 
- nouns for variables and datasets, verbs for functions

## Code commenting practices

- more is not always better
- comments shouldn't focus on the how, but the why

```{r}
#| eval: false
# load in data
df <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-17/artists.csv')
```

<p></p>

:::{.fragment}

```{r}
#| eval: false
# get tidytuesday dataset on artists
# see documentation: https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-01-17/readme.md
df <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-18/chocolate.csv')

```

:::

## Code commenting exercise (15 min?)

Go back to an old script (e.g. for data cleaning, ...) of yours (preferably older than 6 months) and take a look it 
- What have you commented, what haven't you commented?
- Which comments make sense to you? Which don't?
- Show the code to your neighbor without explaining it. What can they understand, what don't they understand?



## Other tricks

- multiline editing


## Workflow

data cleaning / manipulation then analyses.

Keep data cleaning and analysis separate. Create all necessary variables at the start of your script, then move on to analyses.



## Load all necessary packages at the start

- makes it easier to understand which packages are needed

- for big packages, do not necessary load in all packages, you can also just "require" a package to indicate that you need a function from it later

```{r}
#| eval: false
# at the start of your document
require(MASS)

# somewhere later
MASS::bcv()
```


# Ensuring reproducibility


## Package documentation

- always document which versions of packages you use
- simplest way: include `session.info()` function at the end of your script


## Pacman 



# Working with .qmd and .rmd files

Quarto vs. Rmarkdown

https://quarto.org/docs/faq/rmarkdown.html




Tables:
the flextable package


## Working in RMarkdown

Rmarkdown is a powerful tool for combining code, text, and visualizations in a single document. It allows you to create documents that are reproducible, dynamic, and interactive. 

There's a ton of stuff to learn with rmarkdown. Get inspiration [here](https://rmarkdown.rstudio.com/index.html)

## Brief intro to RMarkdown

Rmarkdown documents have 3 basic ingredients

-   *a YAML header* - specifying general output options
-   *Text in markdown format* - any explanatory text you like to add, e.g. documentation
-   *Code chunks* - your R code (can also run python, Stan, ...)

## Work with an example

open up `example_rmd_file.Rmd` and `example_rmd_file.html`


# Exercise:

do something with R
Send to your neighbour to run the script



