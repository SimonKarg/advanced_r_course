---
title: "Reproducible Documents using Quarto & Rmarkdown"
format: 
  revealjs:
    theme: [simple, ../assets/custom.scss]
    df-print: paged
    code-line-numbers: true
editor: source
execute: 
  echo: true
link-external-newwindow: true
---

```{r}
#| echo: false
library(tidyverse)
```

# What are your previous experiences?

-   are you using rmarkdown / quarto documents?
-   what do you think is good / bad about them? When do you prefer using .r scripts?

## Working in RMarkdown

. . . 

Rmarkdown is a powerful tool for combining code, text, and visualizations in a single document. It allows you to create documents that are reproducible, dynamic, and interactive.

. . .

There's a ton of stuff to learn with rmarkdown. Get inspiration [here](https://rmarkdown.rstudio.com/index.html)

## Brief intro to RMarkdown

Rmarkdown documents have 3 basic ingredients

::: {.incremental}

-   **a YAML header** - specifying general output options
-   **Text in markdown format** - any explanatory text you like to add, e.g. documentation
-   **Code chunks** - your R code (can also run python, Stan, ...)

:::

## Quarto vs. Rmarkdown {.smaller}

. . .

Quarto is the new cool kid in town.

. . .

For all intends and purposes, quarto and rmarkdown are **practically interchangeable**. Rmarkdown will not be deprecated, but Quarto is likely to see more development in the future than rmarkdown. 

. . .

Right now, rmarkdown has a bit more user friendliness within RStudio (clearing knitr cache, and setting knitr working directory), but quarto has nicer defaults regarding outputs.

. . .

If you've never used rmarkdown, it's probably a good idea to start with quarto. 
I will use Quarto going forward. But it's totally fine for you to continue with rmarkdown.

. . .

See also the [FAQ from posit](https://quarto.org/docs/faq/rmarkdown.html)


## Look at an example

#### Rmarkdown

-> open `example_rmd_file.Rmd` and `example_rmd_file.html` in example_rmd folder

#### Quarto
- open `example_quarto.qmd` and `example_quarto.html` in example_quarto folder



## Markdown syntax basics

-   `#` is used to define headlines
-   `-` creates an unordered list
-   `1.` creates ordererd lists
-   `*one asterisk*` makes text *italics*
-   `**two asterisks**` makes text **bold**
-   NB: for html documents, you can also use `<html>` tags if you prefer (e.g. I often use `<br>` to add a line break)

For more, see this [markdown guide](https://www.markdownguide.org/basic-syntax/)


## A neat feature: Tabbed Content

::: {.callout-tip}
Html Documents allow you to use tabs to let viewers compare different types of things.

I love this feature to contrast and compare plots or models that rely on similar but different data, e.g. subsamples, or robustness checks.

For .rmd documents you can use tabs by writing {.tabset} after a heading. Then, the next sub-headings after this will be tabbed (see next slide).
:::

## Example

`# My Heading {.tabset}`

`## This is tab 1`

``` {{r}}
iris %>% 
  ggplot(aes(Sepal.Length, Sepal.Width)) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_bw()
```

`## This is tab 2`

``` {{r}}
iris %>% 
  ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_bw() +
  theme(legend.position = c(.8, .15),
        legend.direction = "horizontal")
```

## My Heading {.smaller .scrollable}

::: panel-tabset
## This is tab 1

```{r}
#| fig-height: 4
#| code-fold: true
iris %>% 
  ggplot(aes(Sepal.Length, Sepal.Width)) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_bw()
```

## This is tab 2

```{r}
#| fig-height: 4
#| code-fold: true
iris %>% 
  ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_bw() +
  theme(legend.position = c(.8, .15),
        legend.direction = "horizontal")
```
:::

## My go to rmarkdown file snippets: {.scrollable .smaller}

``` yaml
---
title: "Title..."
author: "--redacted for anonymous peer review--"
date: "date"
output:
  html_document:
    toc: true
    toc_float: 
      collapsed: true
    toc_depth: 4
    theme: flatly
    code_folding: show
    number_sections: false
    keep_md: yes
    df_print: paged
editor_options: 
  chunk_output_type: console 
---
```

<br>

```` markdown
```{=html}
<style type="text/css">
.main-container {
  max-width: 1400px !important;
  width: 1400px !important;
  margin-left: auto;
  margin-right: auto;
}
body {
  font-size: 14pt;
  max-width: 1400px !important;
  width: 1400px;
}
p {
  padding-bottom: 12px;
  padding-top: 12px;
  line-height: 1.15em;
}
</style>
```
````

<br>

```` markdown
```{{r setup, include=FALSE}}
knitr::opts_chunk$set(echo = TRUE, 
                      message = FALSE, 
                      warning = FALSE,
                      fig.width = 10, 
                      fig.height = 7,
                      cache = TRUE,
                      # this requires "styler" package
                      tidy = "styler")

options(width = 200)
```
````

## 

::: {.callout-tip}
## Tip: save your favorite rmarkdown format as a template

Saving your go-to approach as a template helps you be more consistent and faster.

See [here for a guide](https://bookdown.org/yihui/rmarkdown/document-templates.html) on how to set things up :)

**Bonus experience:** doing this will let you create your own first (?) package!
:::

## My go to .qmd snippet yaml header

``` yaml
---
title: "Title"
format: 
  html:
    toc: true
    self-contained: true
    code-fold: true
    code-tools: true
editor: source
author: Author
theme: flatly
execute: 
  cache: true
  warning: false
  message: false
  fig-width: 12 
  fig-height: 9
---
```

## Tip: browse the pre-installed themes for rmarkdown & quarto

## {background-iframe="https://bootswatch.com/3/" background-interactive="true"}
 

# Reproducibility

. . . 

How can we ensure that the work we're doing is computationally reproducible in **5 years?**

## A quick aside: `set.seed()`

. . .

This function sets a seed that lets you reproduce random outcomes.

```{r}
#| output-location: column-fragment
sample(letters, size = 2)
```

. . .

```{r}
#| output-location: column-fragment
sample(letters, size = 2)
```

. . .

```{r}
#| output-location: column-fragment
set.seed(1)
sample(letters, size = 2)
```

. . . 

```{r}
#| output-location: column-fragment
set.seed(1)
sample(letters, size = 2)
```

## A quick aside: `set.seed()`

::: {.callout-warning}
be aware: the following code chunk does not work as perhaps intended:

```` markdown
```{{r}}
set.seed(1)
sample(letters, size = 2)
sample(letters, size = 2)
```
````

:::

. . .

This will evaluate as:
```{r}
set.seed(1)
sample(letters, size = 2)
sample(letters, size = 2)
```



## How can we ensure that the work we're doing is computationally reproducible in 5 years?

## A maximum effort approach {.smaller}

![](images/reproducible_workflow.png)

<p style="font-size:14px">

[Source](https://pure.mpg.de/rest/items/item_3178013/component/file_3319563/content)

</p>

## A minimal requirement: `sessionInfo()`

. . .

--\> prints information about your R session.

```{r}
#| output-location: fragment
sessionInfo()
```

## A golden middle?

. . .

-   The [{renv}]{.blue_highlight} package allows you to save a snapshot of your packages used, and track versions of packages

-   (this is the former {packrat} package)

-   Documentation: <https://rstudio.github.io/renv/articles/renv.html#workflow>


## The [{Renv}]{.blue_highlight} workflow {.smaller}

::: {.incremental}
1.  Call `renv::init()` to initialize a new project-local environment with a private R library

2.  Work in the project as normal, installing and removing new R packages as they are needed in the project

3.  Call `renv::snapshot()` to save the state of the project library to the lockfile (called renv.lock)

4.  Continue working on your project, installing and updating R packages as needed

5.  Call `renv::snapshot()` again to save the state of your project library if your attempts to update R packages were successful, or call `renv::restore()` to revert to the previous state as encoded in the lockfile if your attempts to update packages introduced some new problems.

:::